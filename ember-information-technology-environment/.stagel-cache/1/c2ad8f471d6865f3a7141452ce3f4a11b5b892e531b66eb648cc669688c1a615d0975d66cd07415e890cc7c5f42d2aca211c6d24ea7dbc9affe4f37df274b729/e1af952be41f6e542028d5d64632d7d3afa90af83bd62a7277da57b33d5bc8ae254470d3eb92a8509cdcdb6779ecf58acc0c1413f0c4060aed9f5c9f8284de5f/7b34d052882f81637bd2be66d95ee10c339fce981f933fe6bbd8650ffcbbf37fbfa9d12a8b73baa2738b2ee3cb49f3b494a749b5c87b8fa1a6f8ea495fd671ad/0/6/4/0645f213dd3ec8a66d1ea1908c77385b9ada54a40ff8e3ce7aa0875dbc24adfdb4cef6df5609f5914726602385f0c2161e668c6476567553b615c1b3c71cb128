/* Can check for exception as result like: if eq s/res dcDataNoResultException */

async function dcDataNoResultException() {
    await internalDebugStackEnter('dcDataNoResultException:exceptions'); let strReturn;


    strReturn = '89315802-d53d-4d11-ba5d-bf505e8ed454'; await assertIsStr(strReturn); await internalDebugStackExit(); return strReturn;
}

async function byteArrayFromBasenbUtf8InvalidInputException() {
    await internalDebugStackEnter('byteArrayFromBasenbUtf8InvalidInputException:exceptions'); let strReturn;

    /* It doesn't look like a normal UUID since it's an an/ function, so call strPrintArray on it to get the value as a string that can be compared using excep. (just use excepArr instead, which does this for you) */

    strReturn = '51 98 218 163 23 5 64 236 154 151 89 208 82 253 64 55 '; await assertIsStr(strReturn); await internalDebugStackExit(); return strReturn;
}

async function excep(strTest) {
    await internalDebugCollect('str Test = ' + strTest + '; '); await internalDebugStackEnter('excep:exceptions'); await assertIsStr(strTest); let boolReturn;

    let boolRes = false;
    boolRes = false;
    /* Test for each exception type in turn */
    boolRes = await or(boolRes, await implEq(strTest, await dcDataNoResultException()));
    boolRes = await or(boolRes, await implEq(strTest, await byteArrayFromBasenbUtf8InvalidInputException()));

    boolReturn = boolRes; await assertIsBool(boolReturn); await internalDebugStackExit(); return boolReturn;
}

async function notExcep(strTest) {
    await internalDebugCollect('str Test = ' + strTest + '; '); await internalDebugStackEnter('notExcep:exceptions'); await assertIsStr(strTest); let boolReturn;

    let boolRes = false;
    boolRes = await implNot(await excep(strTest));

    boolReturn = boolRes; await assertIsBool(boolReturn); await internalDebugStackExit(); return boolReturn;
}

async function excepArr(genericArrayTest) {
    await internalDebugCollect('genericArray Test = ' + genericArrayTest + '; '); await internalDebugStackEnter('excepArr:exceptions'); await assertIsGenericArray(genericArrayTest); let boolReturn;

    let boolRes = false;
    boolRes = await excep(await strPrintArray(genericArrayTest));

    boolReturn = boolRes; await assertIsBool(boolReturn); await internalDebugStackExit(); return boolReturn;
}

async function notExcepArr(genericArrayTest) {
    await internalDebugCollect('genericArray Test = ' + genericArrayTest + '; '); await internalDebugStackEnter('notExcepArr:exceptions'); await assertIsGenericArray(genericArrayTest); let boolReturn;

    let boolRes = false;
    boolRes = await implNot(await excepArr(genericArrayTest));

    boolReturn = boolRes; await assertIsBool(boolReturn); await internalDebugStackExit(); return boolReturn;
}

async function excOrEmpty(strTest) {
    await internalDebugCollect('str Test = ' + strTest + '; '); await internalDebugStackEnter('excOrEmpty:exceptions'); await assertIsStr(strTest); let boolReturn;

    let boolRes = false;
    boolRes = await or(await excep(strTest), await strEmpty(strTest));

    boolReturn = boolRes; await assertIsBool(boolReturn); await internalDebugStackExit(); return boolReturn;
}

async function notExcOrEmpty(strTest) {
    await internalDebugCollect('str Test = ' + strTest + '; '); await internalDebugStackEnter('notExcOrEmpty:exceptions'); await assertIsStr(strTest); let boolReturn;

    let boolRes = false;
    boolRes = await implNot(await excOrEmpty(strTest));

    boolReturn = boolRes; await assertIsBool(boolReturn); await internalDebugStackExit(); return boolReturn;
}
