r/v/runTestsFormatUtf8 b/v
    testing b/v 'formatUtf8'
    # FIXME: Update tests for new remainder character format.
    runTest b/v arrEq ( 35 18 36 ) dcaFromUtf8 ( 49 32 50 )
    runTest b/v arrEq ( 49 32 50 ) dcaToUtf8 ( 35 18 36 )
    # Test for converting to UTF8+dcbnb with only one unmappable char at the end
    runTest b/v arrEq append ( 49 32 50 ) append getArmoredUtf8EmbeddedStartUuid } append ( 244 131 173 156 239 159 185 ) getArmoredUtf8EmbeddedEndUuid } } } } dcaToDcbnbUtf8 ( 35 18 36 291 )
    # Test for converting to UTF8+dcbnb with intermixed mappable and nonmappable
    runTest b/v arrEq append ( 49 32 50 ) append getArmoredUtf8EmbeddedStartUuid } append ( 244 131 173 156 239 159 185 50 ) getArmoredUtf8EmbeddedEndUuid } } } } dcaToDcbnbUtf8 ( 35 18 36 291 36 )
    # Tests for converting from UTF8+dcbnb
    runTest b/v arrEq ( 35 18 36 291 36 ) dcaFromDcbnbUtf8 append ( 49 32 50 ) append getArmoredUtf8EmbeddedStartUuid } append ( 244 131 173 156 244 143 191 173 50 ) getArmoredUtf8EmbeddedEndUuid
    runTest b/v arrEq ( 35 18 36 291 ) dcaFromDcbnbUtf8 append ( 49 32 50 ) append getArmoredUtf8EmbeddedStartUuid } append ( 244 131 173 156 244 143 191 173 ) getArmoredUtf8EmbeddedEndUuid
    # Make sure the dcbnb region gets output at the right place relative to the other chars (there's a bug where it outputs 18 18 11 instead of 18 11 18)
    runTest b/v arrEq ( 18 11 18 ) dcaFromDcbnbUtf8 append ( 32 ) append getArmoredUtf8EmbeddedStartUuid } append ( 244 143 191 180 244 143 191 181 ) append getArmoredUtf8EmbeddedEndUuid } ( 32 )
    # Same as the previous test, but with the spaces inside the start and end UUIDs. Works even though the previous one failed.
    runTest b/v arrEq ( 18 11 18 ) dcaFromDcbnbUtf8 append getArmoredUtf8EmbeddedStartUuid } append ( 32 244 143 191 180 244 143 191 181 32 ) getArmoredUtf8EmbeddedEndUuid
    # Like the test after next but with only the first region
    runTest b/v arrEq ( 89 7 ) dcaFromDcbnbUtf8 ( 104 244 141 129 157 244 139 182 128 243 188 183 162 243 186 128 138 243 184 165 142 244 136 186 141 243 178 139 160 244 143 186 144 244 143 191 184 244 143 191 181 243 188 133 185 243 180 182 175 244 136 161 186 243 191 148 138 244 134 178 166 244 141 184 130 243 178 128 176 244 143 188 157 )
    # Second half of the subsequent test
    runTest b/v arrEq ( 11 ) dcaFromDcbnbUtf8 ( 244 141 129 157 244 139 182 128 243 188 183 162 243 186 128 138 243 184 165 142 244 136 186 141 243 178 139 160 244 143 186 144 244 143 191 180 244 143 191 181 243 188 133 185 243 180 182 175 244 136 161 186 243 191 148 138 244 134 178 166 244 141 184 130 243 178 128 176 244 143 188 157 )
    # Two dcbnb regions: The two halves work separately, but fail when together
    runTest b/v arrEq ( 89 7 11 ) dcaFromDcbnbUtf8 ( 104 244 141 129 157 244 139 182 128 243 188 183 162 243 186 128 138 243 184 165 142 244 136 186 141 243 178 139 160 244 143 186 144 244 143 191 184 244 143 191 181 243 188 133 185 243 180 182 175 244 136 161 186 243 191 148 138 244 134 178 166 244 141 184 130 243 178 128 176 244 143 188 157 244 141 129 157 244 139 182 128 243 188 183 162 243 186 128 138 243 184 165 142 244 136 186 141 243 178 139 160 244 143 186 144 244 143 191 180 244 143 191 181 243 188 133 185 243 180 182 175 244 136 161 186 243 191 148 138 244 134 178 166 244 141 184 130 243 178 128 176 244 143 188 157 )
    # It fails without the leading h as well. The issue is that the ( 7 11 ) mysteriously becomes ( 65533 65533 ) when they are together.
    runTest b/v arrEq ( 7 11 ) dcaFromDcbnbUtf8 ( 244 141 129 157 244 139 182 128 243 188 183 162 243 186 128 138 243 184 165 142 244 136 186 141 243 178 139 160 244 143 186 144 244 143 191 184 244 143 191 181 243 188 133 185 243 180 182 175 244 136 161 186 243 191 148 138 244 134 178 166 244 141 184 130 243 178 128 176 244 143 188 157 244 141 129 157 244 139 182 128 243 188 183 162 243 186 128 138 243 184 165 142 244 136 186 141 243 178 139 160 244 143 186 144 244 143 191 180 244 143 191 181 243 188 133 185 243 180 182 175 244 136 161 186 243 191 148 138 244 134 178 166 244 141 184 130 243 178 128 176 244 143 188 157 )
    # With the h in the middle separating the two dcbnb regions
    runTest b/v arrEq ( 7 89 11 ) dcaFromDcbnbUtf8 ( 244 141 129 157 244 139 182 128 243 188 183 162 243 186 128 138 243 184 165 142 244 136 186 141 243 178 139 160 244 143 186 144 244 143 191 184 244 143 191 181 243 188 133 185 243 180 182 175 244 136 161 186 243 191 148 138 244 134 178 166 244 141 184 130 243 178 128 176 244 143 188 157 104 244 141 129 157 244 139 182 128 243 188 183 162 243 186 128 138 243 184 165 142 244 136 186 141 243 178 139 160 244 143 186 144 244 143 191 180 244 143 191 181 243 188 133 185 243 180 182 175 244 136 161 186 243 191 148 138 244 134 178 166 244 141 184 130 243 178 128 176 244 143 188 157 )
    # "h\u{10d05d}\u{10bd80}\u{fcde2}\u{fa00a}\u{f894e}\u{108e8d}\u{f22e0}\u{10fe90}\u{10fff8}\u{10fff5}\u{fc179}\u{f4daf}\u{10887a}\u{ff50a}\u{106ca6}\u{10de02}\u{f2030}\u{10ff1d}\u{10d05d}\u{10bd80}\u{fcde2}\u{fa00a}\u{f894e}\u{108e8d}\u{f22e0}\u{10fe90}\u{10fff4}\u{10fff5}\u{fc179}\u{f4daf}\u{10887a}\u{ff50a}\u{106ca6}\u{10de02}\u{f2030}\u{10ff1d}" "244,141,129,157,244,139,182,128,243,188,183,162,243,186,128,138,243,184,165,142,244,136,186,141,243,178,139,160,244,143,186,144,244,143,191,184,244,143,191,181,243,188,133,185,243,180,182,175,244,136,161,186,243,191,148,138,244,134,178,166,244,141,184,130,243,178,128,176,244,143,188,157" "244,141,129,157,244,139,182,128,243,188,183,162,243,186,128,138,243,184,165,142,244,136,186,141,243,178,139,160,244,143,186,144,244,143,191,180,244,143,191,181,243,188,133,185,243,180,182,175,244,136,161,186,243,191,148,138,244,134,178,166,244,141,184,130,243,178,128,176,244,143,188,157"
    # Test for a bug that results in the output being 16 uppercase letter Bs
    runTest b/v arrEq ( 6 ) dcaFromDcbnbFragmentUtf8 ( 244 143 191 185 239 160 129 )
    # A simple one with new format remainder character
    runTest b/v arrEq ( 82 86 5 ) dcaFromDcbnbFragmentUtf8 ( 97 101 244 143 191 186 239 160 129 )
    # Tests for dcbnbGetLastChar
    # 82 86 5
    runTest b/v arrEq ( 244 143 191 186 239 160 129 ) dcbnbGetLastChar ( 97 101 244 143 191 186 239 160 129 )
    # invalid
    runTest b/v arrEq ( ) dcbnbGetLastChar ( 239 160 129 )
    # invalid
    runTest b/v arrEq ( ) dcbnbGetLastChar ( 97 101 244 143 191 186 )
    # invalid 82
    runTest b/v arrEq ( 82 ) dcbnbGetLastChar ( 244 143 191 186 97 )
    # Tests for dcbnbGetFirstChar
    # 5 82 86
    runTest b/v arrEq ( 244 143 191 186 239 160 129 ) dcbnbGetFirstChar ( 244 143 191 186 239 160 129 97 101 )
    # invalid
    runTest b/v arrEq ( ) dcbnbGetFirstChar ( 239 160 129 )
    # invalid 82 86
    runTest b/v arrEq ( ) dcbnbGetFirstChar ( 239 160 129 97 101 )
    # invalid 82 86
    runTest b/v arrEq ( ) dcbnbGetFirstChar ( 244 143 191 186 97 101 )
    # 86 invalid
    runTest b/v arrEq ( 86 ) dcbnbGetFirstChar ( 101 244 143 191 186 )
    # Tests for utf8CharArrayFromByteArray and vice versa
    runTest b/v arrEq ( 50 53 54 32 50 53 56 32 50 54 48 32 50 54 50 32 50 54 52 32 50 54 51 32 53 55 32 56 54 32 57 51 32 57 51 32 57 54 32 51 48 32 49 56 32 50 56 54 32 55 50 32 57 54 32 57 57 32 57 51 32 56 53 32 50 56 55 32 49 57 32 49 56 32 50 56 52 32 50 54 49 32 50 53 57 32 35 32 115 97 121 32 34 72 101 108 108 111 44 32 47 87 111 114 108 100 47 33 32 9917 34 10 49 32 50 32 35 32 9917 10 ) utf8CharArrayFromByteArray ( 50 53 54 32 50 53 56 32 50 54 48 32 50 54 50 32 50 54 52 32 50 54 51 32 53 55 32 56 54 32 57 51 32 57 51 32 57 54 32 51 48 32 49 56 32 50 56 54 32 55 50 32 57 54 32 57 57 32 57 51 32 56 53 32 50 56 55 32 49 57 32 49 56 32 50 56 52 32 50 54 49 32 50 53 57 32 35 32 115 97 121 32 34 72 101 108 108 111 44 32 47 87 111 114 108 100 47 33 32 226 154 189 34 10 49 32 50 32 35 32 226 154 189 10 )
    runTest b/v arrEq ( 50 53 54 32 50 53 56 32 50 54 48 32 50 54 50 32 50 54 52 32 50 54 51 32 53 55 32 56 54 32 57 51 32 57 51 32 57 54 32 51 48 32 49 56 32 50 56 54 32 55 50 32 57 54 32 57 57 32 57 51 32 56 53 32 50 56 55 32 49 57 32 49 56 32 50 56 52 32 50 54 49 32 50 53 57 32 35 32 115 97 121 32 34 72 101 108 108 111 44 32 47 87 111 114 108 100 47 33 32 226 154 189 34 10 49 32 50 32 35 32 226 154 189 10 ) byteArrayFromUtf8CharArray ( 50 53 54 32 50 53 56 32 50 54 48 32 50 54 50 32 50 54 52 32 50 54 51 32 53 55 32 56 54 32 57 51 32 57 51 32 57 54 32 51 48 32 49 56 32 50 56 54 32 55 50 32 57 54 32 57 57 32 57 51 32 56 53 32 50 56 55 32 49 57 32 49 56 32 50 56 52 32 50 54 49 32 50 53 57 32 35 32 115 97 121 32 34 72 101 108 108 111 44 32 47 87 111 114 108 100 47 33 32 9917 34 10 49 32 50 32 35 32 9917 10 )
